{"version":3,"sources":["rekord-ajax.min.js"],"names":["root","factory","define","amd","Rekord","module","exports","global","require","this","undefined","Rest","database","RestFactory","api","Rekord_rest","call","ajax","xhr","options","send","data","copy","noop","isEmpty","isNumber","rest","XHR","XMLHttpRequest","XDR","XDomainRequest","clearTimeout","setTimeout","prototype","removeTrailingSlash","x","charAt","length","substring","all","success","failure","execute","get","model","$key","create","encoded","update","remove","query","url","method","offlineValue","debug","Debugs","REST","forceOffline","aborted","timeoutTimer","Ajax","headers","cors","useXDR","adjustOptions","onReadyStateChange","readyState","onLoaded","getBody","body","response","responseType","responseText","responseXML","JSON","parse","e","status","onError","onTimeout","abort","stringify","onreadystatechange","onload","onerror","onprogress","ontimeout","open","username","password","withCredentials","timeout","setRequestHeader","key","hasOwnProperty","setRest","RestClass"],"mappings":"CAEC,SAAUA,EAAMC,GAEO,kBAAXC,SAAyBA,OAAOC,IAGzCD,QAAQ,UAAW,SAASE,GAC1B,MAAOH,GAAQD,EAAMI,KAGE,gBAAXC,SAAuBA,OAAOC,QAK5CD,OAAOC,QAAUL,EAAQM,OAAQC,QAAQ,WAKzCR,EAAKI,OAASH,EAAQD,EAAMA,EAAKI,SAEnCK,KAAM,SAASF,EAAQH,EAAQM,GAe/B,QAASC,GAAKC,GAEZH,KAAKG,SAAWA,EAmKlB,QAASC,GAAYD,GAEnB,MAAMA,GAASE,IAKR,GAAIH,GAAMC,GAHRG,EAAYC,KAAMP,KAAMG,GAMnC,QAASK,GAAKC,EAAKC,GAEjBD,EAAIE,KAAMD,EAAQE,MA7LpB,GAAIC,GAAOlB,EAAOkB,KACdC,EAAOnB,EAAOmB,KACdC,EAAUpB,EAAOoB,QACjBC,EAAWrB,EAAOqB,SAClBV,EAAcX,EAAOsB,KAErBC,EAAMpB,EAAOqB,gBAAkBL,EAC/BM,EAAM,mBAAqB,IAAKF,GAASA,EAAMpB,EAAOuB,eAEtDC,EAAexB,EAAOwB,aACtBC,EAAazB,EAAOyB,UAiMxB,OA1LArB,GAAKsB,WAEHC,oBAAqB,SAASC,GAE5B,MAAkC,MAA3BA,EAAEC,OAAOD,EAAEE,OAAS,GAAaF,EAAEG,UAAU,EAAGH,EAAEE,OAAS,GAAKF,GAEzEI,IAAK,SAAUC,EAASC,GAEtBhC,KAAKiC,QAAS,MAAO,KAAMhC,EAAWD,KAAKG,SAASE,IAAK0B,EAASC,OAEpEE,IAAK,SAAUC,EAAOJ,EAASC,GAE7BhC,KAAKiC,QAAS,MAAOE,EAAOlC,EAAWD,KAAKyB,oBAAqBzB,KAAKG,SAASE,IAAM8B,EAAMC,QAAUL,EAASC,IAEhHK,OAAQ,SAAUF,EAAOG,EAASP,EAASC,GAEzChC,KAAKiC,QAAS,OAAQE,EAAOG,EAAStC,KAAKyB,oBAAqBzB,KAAKG,SAASE,KAAO0B,EAASC,OAEhGO,OAAQ,SAAUJ,EAAOG,EAASP,EAASC,GAEzChC,KAAKiC,QAAS,MAAOE,EAAOG,EAAStC,KAAKyB,oBAAqBzB,KAAKG,SAASE,IAAM8B,EAAMC,QAAUL,EAASC,OAE9GQ,OAAQ,SAAUL,EAAOJ,EAASC,GAEhChC,KAAKiC,QAAS,SAAUE,EAAOlC,EAAWD,KAAKyB,oBAAqBzB,KAAKG,SAASE,IAAM8B,EAAMC,QAAUL,EAASC,OAEnHS,MAAO,SAAUC,EAAK9B,EAAMmB,EAASC,GAEnC,GAAIW,GAAS5B,EAASH,GAAS,MAAQ,MAEvCZ,MAAKiC,QAASU,EAAQ,KAAM/B,EAAM8B,EAAKX,EAASC,IAElDC,QAAS,SAAUU,EAAQR,EAAOvB,EAAM8B,EAAKX,EAASC,EAASY,GAI7D,GAFAjD,EAAOkD,MAAOlD,EAAOmD,OAAOC,KAAM/C,KAAM2C,EAAQD,EAAK9B,GAEhDjB,EAAOqD,aAEVhB,EAASY,EAAc,OAGzB,CACE,GAAIK,GACAC,EACAxC,EAAUG,EAAMlB,EAAOwD,KAAKzC,SAC5B0C,EAAU1C,EAAQ0C,QAAU1C,EAAQ0C,YACpC3C,EAAMC,EAAQ2C,MAAQ3C,EAAQ4C,OAAS,GAAIlC,GAAQ,GAAIF,EAE3DR,GAAQiC,OAASA,EACjBjC,EAAQgC,IAAMA,EACdhC,EAAQE,KAAOA,EAEfjB,EAAOwD,KAAKI,cAAe7C,EAASV,KAAKG,SAAUwC,EAAQR,EAAOvB,EAAM8B,EAAKX,EAASC,EAEtF,IAAIwB,GAAqB,WAEA,IAAnB/C,EAAIgD,YAENC,KAIAC,EAAU,WAEZ,GAAIC,EAECnD,GAAIoD,SAEPD,EAAOnD,EAAIoD,SAEkB,SAArBpD,EAAIqD,cAA4BrD,EAAIqD,eAE5CF,EAAOnD,EAAIsD,cAAgBtD,EAAIuD,YAGjC,KAEEJ,EAAOK,KAAKC,MAAON,GAErB,MAAOO,IAEP,MAAOP,IAGLF,EAAW,WAEb,IAAKT,EAAL,CAKA,GAAImB,IAAU1D,EAAQ4C,QAAU7C,EAAI2D,SAAWnE,EAAY,IAAsB,OAAfQ,EAAI2D,OAAkB,IAAM3D,EAAI2D,SAAY,EAC1GP,EAAWF,GAEC,KAAXS,EAEHrC,EAAS8B,GAIT7B,EAAS6B,EAAU,GAGrB9B,EAAUjB,EACVkB,EAAUlB,EACVQ,EAAc4B,KAGZmB,EAAU,WAEZrC,EAAS,KAAM,GACfA,EAAUlB,EACViB,EAAUjB,EACVQ,EAAc4B,IAGZoB,EAAY,WAEdrB,GAAU,EACVxC,EAAI8D,MAAM,WACVF,IAwBF,IArBAjB,EAAgB,OAAI,mBAEJ,QAAXT,GAA+B,SAAXA,IAEvBS,EAAQ,gBAAkB,mBAC1B1C,EAAQE,KAAOqD,KAAKO,UAAW9D,EAAQE,OAGzCH,EAAIgE,mBAAqBjB,EACzB/C,EAAIiE,OAAShB,EACbjD,EAAIkE,QAAUN,EACd5D,EAAImE,WAAa,aACjBnE,EAAIoE,UAAYR,EAChB5D,EAAIqE,KAAMpE,EAAQiC,OAAQjC,EAAQgC,KAAK,EAAMhC,EAAQqE,SAAUrE,EAAQsE,UACvEvE,EAAIwE,kBAAoBvE,EAAQuE,gBAE3BjE,EAAUN,EAAQwE,UAAaxE,EAAQwE,QAAU,IAEpDhC,EAAe3B,EAAY+C,EAAW5D,EAAQwE,UAG5CzE,EAAI0E,iBAEN,IAAK,GAAIC,KAAOhC,GAEVA,EAAQiC,eAAgBD,IAE1B3E,EAAI0E,iBAAkBC,EAAKhC,EAASgC,GAK1CzF,GAAOwD,KAAK3C,KAAMC,EAAKC,MAoB7Bf,EAAO2F,QAASlF,GAAa,GAE7BT,EAAOwD,MAELlC,KAAMb,EACNM,WACA6C,cAAezC,EACfN,KAAMA,EACN+E,UAAWrF,GAGNP","file":"rekord-ajax.min.js","sourcesContent":["/* rekord-ajax 1.4.3 - A dependency free AJAX implementation of Rekord.rest by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['rekord'], function(Rekord) { // jshint ignore:line\n      return factory(root, Rekord);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('rekord'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord);\n  }\n}(this, function(global, Rekord, undefined)\n{\n\n  var copy = Rekord.copy;\n  var noop = Rekord.noop;\n  var isEmpty = Rekord.isEmpty;\n  var isNumber = Rekord.isNumber;\n  var Rekord_rest = Rekord.rest;\n\n  var XHR = global.XMLHttpRequest || noop;\n  var XDR = 'withCredentials' in (new XHR()) ? XHR : global.XDomainRequest;\n\n  var clearTimeout = global.clearTimeout;\n  var setTimeout = global.setTimeout;\n\n  function Rest(database)\n  {\n    this.database = database;\n  }\n\n  Rest.prototype =\n  {\n    removeTrailingSlash: function(x)\n    {\n      return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n    },\n    all: function( success, failure )\n    {\n      this.execute( 'GET', null, undefined, this.database.api, success, failure, [] );\n    },\n    get: function( model, success, failure )\n    {\n      this.execute( 'GET', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure );\n    },\n    create: function( model, encoded, success, failure )\n    {\n      this.execute( 'POST', model, encoded, this.removeTrailingSlash( this.database.api ), success, failure, {} );\n    },\n    update: function( model, encoded, success, failure )\n    {\n      this.execute( 'PUT', model, encoded, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    remove: function( model, success, failure )\n    {\n      this.execute( 'DELETE', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    query: function( url, data, success, failure )\n    {\n      var method = isEmpty( data ) ? 'GET' : 'POST';\n\n      this.execute( method, null, data, url, success, failure );\n    },\n    execute: function( method, model, data, url, success, failure, offlineValue )\n    {\n      Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n      if ( Rekord.forceOffline )\n      {\n        failure( offlineValue, 0 );\n      }\n      else\n      {\n        var aborted;\n        var timeoutTimer;\n        var options = copy( Rekord.Ajax.options );\n        var headers = options.headers = options.headers || {};\n        var xhr = options.cors || options.useXDR ? new XDR() : new XHR();\n\n        options.method = method;\n        options.url = url;\n        options.data = data;\n\n        Rekord.Ajax.adjustOptions( options, this.database, method, model, data, url, success, failure );\n\n        var onReadyStateChange = function()\n        {\n          if (xhr.readyState === 4)\n          {\n            onLoaded();\n          }\n        };\n\n        var getBody = function()\n        {\n          var body;\n\n          if ( xhr.response )\n          {\n            body = xhr.response;\n          }\n          else if ( xhr.responseType === \"text\" || !xhr.responseType )\n          {\n            body = xhr.responseText || xhr.responseXML;\n          }\n\n          try\n          {\n            body = JSON.parse( body );\n          }\n          catch (e) {}\n\n          return body;\n        };\n\n        var onLoaded = function()\n        {\n          if ( aborted )\n          {\n            return;\n          }\n\n          var status = (options.useXDR && xhr.status === undefined ? 200 : (xhr.status === 1223 ? 204 : xhr.status)) || 0;\n          var response = getBody();\n\n          if ( status !== 0 )\n          {\n            success( response );\n          }\n          else\n          {\n            failure( response, 0 );\n          }\n\n          success = noop;\n          failure = noop;\n          clearTimeout( timeoutTimer );\n        };\n\n        var onError = function()\n        {\n          failure( null, 0 );\n          failure = noop;\n          success = noop;\n          clearTimeout( timeoutTimer );\n        };\n\n        var onTimeout = function()\n        {\n          aborted = true;\n          xhr.abort('timeout');\n          onError();\n        };\n\n        headers['Accept'] = 'application/json'; // jshint ignore:line\n\n        if ( method !== \"GET\" && method !== \"HEAD\" )\n        {\n          headers['Content-Type'] = 'application/json';\n          options.data = JSON.stringify( options.data );\n        }\n\n        xhr.onreadystatechange = onReadyStateChange;\n        xhr.onload = onLoaded;\n        xhr.onerror = onError;\n        xhr.onprogress = function() {};\n        xhr.ontimeout = onError;\n        xhr.open( options.method, options.url, true, options.username, options.password );\n        xhr.withCredentials = !!options.withCredentials;\n\n        if ( isNumber( options.timeout ) && options.timeout > 0 )\n        {\n          timeoutTimer = setTimeout( onTimeout, options.timeout );\n        }\n\n        if (xhr.setRequestHeader)\n        {\n          for( var key in headers )\n          {\n            if( headers.hasOwnProperty( key ) )\n            {\n              xhr.setRequestHeader( key, headers[ key ] );\n            }\n          }\n        }\n\n        Rekord.Ajax.ajax( xhr, options );\n      }\n    }\n  };\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    return new Rest( database );\n  }\n\n  function ajax(xhr, options)\n  {\n    xhr.send( options.data );\n  }\n\n  Rekord.setRest( RestFactory, true );\n\n  Rekord.Ajax =\n  {\n    rest: RestFactory,\n    options: {},\n    adjustOptions: noop,\n    ajax: ajax,\n    RestClass: Rest\n  };\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}